using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using CSRDReporting.Models;
using CSRDReporting.DataAccess;

namespace CSRDReporting.Services
{
    /// <summary>
    /// Service for generating CSRD and ESRS compliance reports
    /// Handles report generation, formatting, and export functionality
    /// </summary>
    public class ReportingService
    {
        private readonly EmissionsRepository _emissionsRepository;

        /// <summary>
        /// Initializes a new instance of the ReportingService
        /// </summary>
        public ReportingService()
        {
            _emissionsRepository = new EmissionsRepository();
        }

        /// <summary>
        /// Generates a comprehensive ESRS E1 Climate Change report
        /// </summary>
        /// <param name="reportingYear">Year for the report</param>
        /// <returns>Formatted report content</returns>
        public async Task<string> GenerateClimateReportAsync(int reportingYear)
        {
            var emissions = await _emissionsRepository.GetByYearAsync(reportingYear);
            var trends = await _emissionsRepository.GetEmissionTrendsAsync();
            var verificationStats = await _emissionsRepository.GetVerificationStatisticsAsync();

            var report = new StringBuilder();

            // Report Header
            report.AppendLine("CORPORATE SUSTAINABILITY REPORTING DIRECTIVE (CSRD)");
            report.AppendLine("EUROPEAN SUSTAINABILITY REPORTING STANDARDS - E1 CLIMATE CHANGE");
            report.AppendLine($"REPORTING PERIOD: {reportingYear}");
            report.AppendLine($"REPORT GENERATED: {DateTime.Now:yyyy-MM-dd HH:mm}");
            report.AppendLine(new string('=', 80));
            report.AppendLine();

            // Executive Summary
            await AddExecutiveSummary(report, emissions, reportingYear);

            // ESRS E1 Data Points
            await AddESRSE1DataPoints(report, emissions);

            // Emissions Breakdown
            await AddEmissionsBreakdown(report, emissions);

            // Year-over-Year Analysis
            await AddTrendAnalysis(report, trends, reportingYear);

            // Data Quality and Verification
            await AddDataQualitySection(report, emissions, verificationStats);

            // Compliance Checklist
            await AddComplianceChecklist(report, emissions);

            // Footer
            report.AppendLine();
            report.AppendLine(new string('=', 80));
            report.AppendLine("This report was generated in accordance with:");
            report.AppendLine("• Corporate Sustainability Reporting Directive (CSRD)");
            report.AppendLine("• European Sustainability Reporting Standards (ESRS)");
            report.AppendLine("• GHG Protocol Corporate Accounting and Reporting Standard");
            report.AppendLine();
            report.AppendLine("Report generated by CSRD ESG Reporting System v1.0");

            return report.ToString();
        }

        /// <summary>
        /// Adds executive summary section to the report
        /// </summary>
        private async Task AddExecutiveSummary(StringBuilder report, IEnumerable<EmissionRecord> emissions, int reportingYear)
        {
            report.AppendLine("1. EXECUTIVE SUMMARY");
            report.AppendLine(new string('-', 40));

            decimal totalScope1 = 0, totalScope2Location = 0, totalScope2Market = 0, totalScope3 = 0;
            int recordCount = 0;

            foreach (var emission in emissions)
            {
                totalScope1 += emission.Scope1Emissions;
                totalScope2Location += emission.Scope2LocationBased;
                totalScope2Market += emission.Scope2MarketBased;
                totalScope3 += emission.Scope3Emissions;
                recordCount++;
            }

            decimal totalEmissions = totalScope1 + totalScope2Market + totalScope3;

            report.AppendLine($"Total GHG Emissions ({reportingYear}): {totalEmissions:N2} tCO2e");
            report.AppendLine($"• Scope 1 (Direct): {totalScope1:N2} tCO2e ({(totalEmissions > 0 ? totalScope1 / totalEmissions * 100 : 0):N1}%)");
            report.AppendLine($"• Scope 2 (Market-based): {totalScope2Market:N2} tCO2e ({(totalEmissions > 0 ? totalScope2Market / totalEmissions * 100 : 0):N1}%)");
            report.AppendLine($"• Scope 3 (Value chain): {totalScope3:N2} tCO2e ({(totalEmissions > 0 ? totalScope3 / totalEmissions * 100 : 0):N1}%)");
            report.AppendLine();
            report.AppendLine($"Data Records: {recordCount}");

            // Previous year comparison if available
            var previousYearEmissions = await _emissionsRepository.GetByYearAsync(reportingYear - 1);
            decimal previousTotal = 0;
            foreach (var emission in previousYearEmissions)
            {
                previousTotal += emission.TotalEmissions;
            }

            if (previousTotal > 0)
            {
                decimal change = ((totalEmissions - previousTotal) / previousTotal) * 100;
                string changeDirection = change >= 0 ? "increase" : "decrease";
                report.AppendLine($"Year-over-year change: {Math.Abs(change):N1}% {changeDirection}");
            }

            report.AppendLine();
        }

        /// <summary>
        /// Adds ESRS E1 specific data points section
        /// </summary>
        private async Task AddESRSE1DataPoints(StringBuilder report, IEnumerable<EmissionRecord> emissions)
        {
            report.AppendLine("2. ESRS E1 DATA POINTS");
            report.AppendLine(new string('-', 40));

            report.AppendLine("The following data points are reported in accordance with ESRS E1:");
            report.AppendLine();

            report.AppendLine("E1-1: Transition plan for climate change mitigation");
            report.AppendLine("Status: [To be completed - narrative disclosure required]");
            report.AppendLine();

            report.AppendLine("E1-4: Targets related to climate change mitigation and adaptation");
            report.AppendLine("Status: [To be completed - targets and progress disclosure required]");
            report.AppendLine();

            report.AppendLine("E1-6: Gross Scopes 1, 2, 3 and Total GHG emissions");
            report.AppendLine("Status: ✓ COMPLETED - Quantitative data provided below");
            report.AppendLine();

            report.AppendLine("E1-7: GHG removals and GHG mitigation projects");
            report.AppendLine("Status: [To be completed if applicable]");
            report.AppendLine();

            report.AppendLine("E1-8: Internal carbon pricing");
            report.AppendLine("Status: [To be completed if applicable]");
            report.AppendLine();

            report.AppendLine("E1-9: Anticipated financial effects from material physical and transition risks");
            report.AppendLine("Status: [To be completed - financial assessment required]");
            report.AppendLine();
        }

        /// <summary>
        /// Adds detailed emissions breakdown section
        /// </summary>
        private async Task AddEmissionsBreakdown(StringBuilder report, IEnumerable<EmissionRecord> emissions)
        {
            report.AppendLine("3. DETAILED EMISSIONS BREAKDOWN");
            report.AppendLine(new string('-', 40));

            report.AppendLine($"{"Record ID",-10} {"Scope 1",-12} {"Scope 2 (LB)",-15} {"Scope 2 (MB)",-15} {"Scope 3",-12} {"Total",-12} {"Verification",-15}");
            report.AppendLine(new string('-', 95));

            foreach (var emission in emissions)
            {
                report.AppendLine($"{emission.Id,-10} " +
                                $"{emission.Scope1Emissions,-12:N2} " +
                                $"{emission.Scope2LocationBased,-15:N2} " +
                                $"{emission.Scope2MarketBased,-15:N2} " +
                                $"{emission.Scope3Emissions,-12:N2} " +
                                $"{emission.TotalEmissions,-12:N2} " +
                                $"{emission.VerificationStatus,-15}");
            }

            report.AppendLine();
            report.AppendLine("Notes:");
            report.AppendLine("• LB = Location-Based (using grid average emission factors)");
            report.AppendLine("• MB = Market-Based (reflecting contractual arrangements)");
            report.AppendLine("• All values in tCO2e (tonnes of CO2 equivalent)");
            report.AppendLine();
        }

        /// <summary>
        /// Adds trend analysis section
        /// </summary>
        private async Task AddTrendAnalysis(StringBuilder report, Dictionary<int, decimal> trends, int reportingYear)
        {
            report.AppendLine("4. EMISSIONS TREND ANALYSIS");
            report.AppendLine(new string('-', 40));

            if (trends.Count > 1)
            {
                report.AppendLine("Year-over-year emissions (tCO2e):");
                report.AppendLine();

                foreach (var trend in trends.OrderBy(t => t.Key))
                {
                    string indicator = trend.Key == reportingYear ? " ← Current Year" : "";
                    report.AppendLine($"{trend.Key}: {trend.Value:N2}{indicator}");
                }

                // Calculate trend direction
                var years = trends.Keys.OrderBy(y => y).ToList();
                if (years.Count >= 2)
                {
                    var firstYear = years.First();
                    var lastYear = years.Last();
                    var firstValue = trends[firstYear];
                    var lastValue = trends[lastYear];

                    if (firstValue > 0)
                    {
                        decimal overallChange = ((lastValue - firstValue) / firstValue) * 100;
                        string direction = overallChange >= 0 ? "increased" : "decreased";
                        report.AppendLine();
                        report.AppendLine($"Overall trend ({firstYear}-{lastYear}): Emissions {direction} by {Math.Abs(overallChange):N1}%");
                    }
                }
            }
            else
            {
                report.AppendLine("Insufficient data for trend analysis. Multiple years of data required.");
            }

            report.AppendLine();
        }

        /// <summary>
        /// Adds data quality and verification section
        /// </summary>
        private async Task AddDataQualitySection(StringBuilder report, IEnumerable<EmissionRecord> emissions, Dictionary<string, int> verificationStats)
        {
            report.AppendLine("5. DATA QUALITY AND VERIFICATION");
            report.AppendLine(new string('-', 40));

            report.AppendLine("Verification Status Summary:");
            foreach (var stat in verificationStats)
            {
                report.AppendLine($"• {stat.Key}: {stat.Value} records");
            }

            report.AppendLine();
            report.AppendLine("Data Quality Assessment:");
            
            int totalRecords = emissions.Count();
            int recordsWithQuality = emissions.Count(e => !string.IsNullOrEmpty(e.DataQuality));
            int verifiedRecords = emissions.Count(e => e.VerificationStatus == "Third-party verified");

            report.AppendLine($"• Total records: {totalRecords}");
            report.AppendLine($"• Records with quality assessment: {recordsWithQuality} ({(totalRecords > 0 ? (decimal)recordsWithQuality / totalRecords * 100 : 0):N1}%)");
            report.AppendLine($"• Third-party verified records: {verifiedRecords} ({(totalRecords > 0 ? (decimal)verifiedRecords / totalRecords * 100 : 0):N1}%)");

            report.AppendLine();
        }

        /// <summary>
        /// Adds ESRS compliance checklist
        /// </summary>
        private async Task AddComplianceChecklist(StringBuilder report, IEnumerable<EmissionRecord> emissions)
        {
            report.AppendLine("6. ESRS E1 COMPLIANCE CHECKLIST");
            report.AppendLine(new string('-', 40));

            bool hasEmissionsData = emissions.Any();
            bool hasScope1Data = emissions.Any(e => e.Scope1Emissions > 0);
            bool hasScope2Data = emissions.Any(e => e.Scope2LocationBased > 0 || e.Scope2MarketBased > 0);
            bool hasScope3Data = emissions.Any(e => e.Scope3Emissions > 0);
            bool hasVerification = emissions.Any(e => !string.IsNullOrEmpty(e.VerificationStatus) && e.VerificationStatus != "Unverified");
            bool hasDataQuality = emissions.Any(e => !string.IsNullOrEmpty(e.DataQuality));

            report.AppendLine("Mandatory Data Points (ESRS E1):");
            report.AppendLine($"☐ {GetCheckmark(hasEmissionsData)} Basic emissions data structure");
            report.AppendLine($"☐ {GetCheckmark(hasScope1Data)} Scope 1 emissions disclosed");
            report.AppendLine($"☐ {GetCheckmark(hasScope2Data)} Scope 2 emissions disclosed (both methods)");
            report.AppendLine($"☐ {GetCheckmark(hasScope3Data)} Scope 3 emissions disclosed (if material)");
            report.AppendLine($"☐ {GetCheckmark(hasVerification)} Verification status documented");
            report.AppendLine($"☐ {GetCheckmark(hasDataQuality)} Data quality assessment provided");

            report.AppendLine();
            report.AppendLine("Additional Requirements (To be completed):");
            report.AppendLine("☐ [ ] Climate transition plan (E1-1)");
            report.AppendLine("☐ [ ] Climate-related targets (E1-4)");
            report.AppendLine("☐ [ ] Physical and transition risk assessment");
            report.AppendLine("☐ [ ] Climate-related opportunities assessment");
            report.AppendLine("☐ [ ] Financial effects quantification");

            report.AppendLine();

            decimal completionPercentage = (new[] { hasEmissionsData, hasScope1Data, hasScope2Data, hasScope3Data, hasVerification, hasDataQuality }).Count(x => x) / 6m * 100;
            report.AppendLine($"Current Data Completion: {completionPercentage:N1}%");

            report.AppendLine();
        }

        /// <summary>
        /// Gets checkmark symbol for completed items
        /// </summary>
        private string GetCheckmark(bool isCompleted)
        {
            return isCompleted ? "✓" : " ";
        }

        /// <summary>
        /// Generates a summary report for management dashboard
        /// </summary>
        /// <param name="reportingYear">Year for the report</param>
        /// <returns>Summary report content</returns>
        public async Task<string> GenerateSummaryReportAsync(int reportingYear)
        {
            var emissions = await _emissionsRepository.GetByYearAsync(reportingYear);
            var report = new StringBuilder();

            report.AppendLine($"CSRD SUMMARY REPORT - {reportingYear}");
            report.AppendLine(new string('=', 40));

            decimal totalEmissions = 0;
            foreach (var emission in emissions)
            {
                totalEmissions += emission.TotalEmissions;
            }

            report.AppendLine($"Total GHG Emissions: {totalEmissions:N2} tCO2e");
            report.AppendLine($"Data Records: {emissions.Count()}");
            report.AppendLine($"Report Generated: {DateTime.Now:yyyy-MM-dd}");

            return report.ToString();
        }

        /// <summary>
        /// Exports report data to CSV format
        /// </summary>
        /// <param name="reportingYear">Year for the report</param>
        /// <returns>CSV formatted data</returns>
        public async Task<string> ExportToCSVAsync(int reportingYear)
        {
            var emissions = await _emissionsRepository.GetByYearAsync(reportingYear);
            var csv = new StringBuilder();

            // CSV Header
            csv.AppendLine("RecordID,ReportingYear,Scope1Emissions,Scope2LocationBased,Scope2MarketBased,Scope3Emissions,TotalEmissions,DataQuality,VerificationStatus,Notes,CreatedDate,ModifiedDate");

            // CSV Data
            foreach (var emission in emissions)
            {
                csv.AppendLine($"{emission.Id},{emission.ReportingYear},{emission.Scope1Emissions:F2},{emission.Scope2LocationBased:F2},{emission.Scope2MarketBased:F2},{emission.Scope3Emissions:F2},{emission.TotalEmissions:F2},\"{emission.DataQuality}\",\"{emission.VerificationStatus}\",\"{emission.Notes?.Replace("\"", "\"\"")}\",{emission.CreatedDate:yyyy-MM-dd HH:mm:ss},{emission.ModifiedDate:yyyy-MM-dd HH:mm:ss}");
            }

            return csv.ToString();
        }
    }
}